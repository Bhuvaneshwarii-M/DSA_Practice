//left view

import java.util.*;

class TreeNode {
    int val;
    TreeNode left, right;

    TreeNode(int val) {
        this.val = val;
        left = right = null;
    }
}

public class BinaryTreeViews {

    public static void leftView(TreeNode root) {
        if (root == null) return;

        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            int levelSize = queue.size();

            for (int i = 0; i < levelSize; i++) {
                TreeNode current = queue.poll();
                if (i == 0) { // First node of the current level
                    System.out.print(current.val + " ");
                }
                if (current.left != null) queue.add(current.left);
                if (current.right != null) queue.add(current.right);
            }
        }
    }
}

//right view
    public static void rightView(TreeNode root) {
        if (root == null) return;

        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            int levelSize = queue.size();

            for (int i = 0; i < levelSize; i++) {
                TreeNode current = queue.poll();
                if (i == levelSize - 1) { // Last node of the current level
                    System.out.print(current.val + " ");
                }
                if (current.left != null) queue.add(current.left);
                if (current.right != null) queue.add(current.right);
            }
        }
    }
//top view


    public static void topView(TreeNode root) {
        if (root == null) return;

        class Pair {
            TreeNode node;
            int hd;

            Pair(TreeNode node, int hd) {
                this.node = node;
                this.hd = hd;
            }
        }

        Map<Integer, Integer> topViewMap = new TreeMap<>();
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(root, 0));

        while (!queue.isEmpty()) {
            Pair current = queue.poll();
            int hd = current.hd;
            TreeNode node = current.node;

            if (!topViewMap.containsKey(hd)) {
                topViewMap.put(hd, node.val);
            }

            if (node.left != null) queue.add(new Pair(node.left, hd - 1));
            if (node.right != null) queue.add(new Pair(node.right, hd + 1));
        }

        for (int value : topViewMap.values()) {
            System.out.print(value + " ");
        }
    }
//bottom view

    public static void bottomView(TreeNode root) {
        if (root == null) return;

        class Pair {
            TreeNode node;
            int hd;

            Pair(TreeNode node, int hd) {
                this.node = node;
                this.hd = hd;
            }
        }

        Map<Integer, Integer> bottomViewMap = new TreeMap<>();
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(root, 0));

        while (!queue.isEmpty()) {
            Pair current = queue.poll();
            int hd = current.hd;
            TreeNode node = current.node;

            bottomViewMap.put(hd, node.val);

            if (node.left != null) queue.add(new Pair(node.left, hd - 1));
            if (node.right != null) queue.add(new Pair(node.right, hd + 1));
        }

        for (int value : bottomViewMap.values()) {
            System.out.print(value + " ");
        }
    }

//driver code


public static void main(String[] args) {
    TreeNode root = new TreeNode(1);
    root.left = new TreeNode(2);
    root.right = new TreeNode(3);
    root.left.left = new TreeNode(4);
    root.left.right = new TreeNode(5);
    root.right.left = new TreeNode(6);
    root.right.right = new TreeNode(7);

    System.out.println("Left View:");
    leftView(root);
    System.out.println("\nRight View:");
    rightView(root);
    System.out.println("\nTop View:");
    topView(root);
    System.out.println("\nBottom View:");
    bottomView(root);
}
